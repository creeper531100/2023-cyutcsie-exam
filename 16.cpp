#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <fstream>
#include <stdio.h>
#include <stdlib.h>

/********************************************************************
* 注意，此程式碼並非我撰寫的
* 此程式碼是由 Kashionz 撰寫，我只加入了註解並改善了變數名稱。
* 如果您想了解更多訊息，請參閱 Kashionz 的原始碼。
* https://gist.github.com/Kashionz/2430b7408ae6193e832365535f953ecb
*********************************************************************/

using namespace std;
int main() {
    fstream file("123.txt", ios::in); // 開啟檔案，設定為讀取模式
    int M; // 每年存款金額
    int T; // 存款年數
    float S; // 本利和

    file >> M >> T >> S; // 從檔案中讀取資料
    printf("%d\n%d\n%.0lf\n", M, T, S);

    S = S / M; // 將本利和轉換成每年的本利和

    float r = 1; // 複利率初始值為1（即不複利）

    while (true) {
        /*
         * 這個不等式的意思是，以年複利率 r，存款年數 T，每年存款金額相同為 M 的情況下，存款的本利和大於 S。
         * 其中，S 是給定的本利和數量，代表了我們想要達到的目標。
         * 在這個判斷式中，r 代表年複利率。在程式中，我們通過不斷調整 r 的值，使得上面的判斷式成立
         */
        if (r * (pow(r, T) - 1) / (r - 1) > S) {
            break; // 如果相等，則跳出迴圈
        }
        r += 0.00001; // 如果不相等，則嘗試增加複利率0.00001，重新計算本利和
    }

    // 輸出結果，注意要將預期本利和乘以每年存款金額
    printf("Ans=%.2f%%\n", (r - 1) * 100);
}

/*
 * 儲蓄是一種美德，目前常見的儲蓄方式為定時存款，整筆領回，利率採每年複利的方式
 * 計算。例如：每年存 100000，存 3 年，若是複利率為 2.25%，3 年後的本利和如下：
 * 第一年初存入 100000，本金=100000
 * 第二年初，前一年本利=100000*(1+2.25%)=102250，加上存入的 100000，合計 202250
 * 第三年初，前一年本利=202250*(1+2.25%)=206801，加上存入的 100000，合計 306801
 * 第三年尾合計領回的本利和=306801*(1+2.25%)=313704
 * 請寫一個程式從資料檔 a.txt 中讀入三行資料，第一行是每年存款的金額，第二行是存
 * 款年數，第三行是本利和，接著反算出存款複利率為何（請計算到小數點後兩位）。
 * 範例輸入:
 * 6
 * 100000
 * 3
 * 313704
 * 範例輸出:
 * 100000
 * 3
 * 313704
 * Ans=2.25%
 */